# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cyberdog_app_pb2 as cyberdog__app__pb2


class CyberdogAppStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setMode = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/setMode',
                request_serializer=cyberdog__app__pb2.CheckoutMode_request.SerializeToString,
                response_deserializer=cyberdog__app__pb2.CheckoutMode_respond.FromString,
                )
        self.setPattern = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/setPattern',
                request_serializer=cyberdog__app__pb2.CheckoutPattern_request.SerializeToString,
                response_deserializer=cyberdog__app__pb2.CheckoutPattern_respond.FromString,
                )
        self.setFollowRegion = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/setFollowRegion',
                request_serializer=cyberdog__app__pb2.BodyRegion_Request.SerializeToString,
                response_deserializer=cyberdog__app__pb2.BodyRegion_Respond.FromString,
                )
        self.requestCamera = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/requestCamera',
                request_serializer=cyberdog__app__pb2.CameraService_request.SerializeToString,
                response_deserializer=cyberdog__app__pb2.CameraService_respond.FromString,
                )
        self.requestVoice = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/requestVoice',
                request_serializer=cyberdog__app__pb2.Voiceprint_Request.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Voiceprint_Response.FromString,
                )
        self.requestFaceManager = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/requestFaceManager',
                request_serializer=cyberdog__app__pb2.FaceManager_Request.SerializeToString,
                response_deserializer=cyberdog__app__pb2.FaceManager_Response.FromString,
                )
        self.sendAppDecision = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/sendAppDecision',
                request_serializer=cyberdog__app__pb2.Decissage.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.sendAiToken = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/sendAiToken',
                request_serializer=cyberdog__app__pb2.TokenPass_Request.SerializeToString,
                response_deserializer=cyberdog__app__pb2.TokenPass_Response.FromString,
                )
        self.setNavPosition = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/setNavPosition',
                request_serializer=cyberdog__app__pb2.Target_Request.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Target_Response.FromString,
                )
        self.setExtmonOrder = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/setExtmonOrder',
                request_serializer=cyberdog__app__pb2.ExtMonOrder_Request.SerializeToString,
                response_deserializer=cyberdog__app__pb2.ExtMonOrder_Respond.FromString,
                )
        self.disconnect = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/disconnect',
                request_serializer=cyberdog__app__pb2.Disconnect.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.setBtRemoteCmd = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/setBtRemoteCmd',
                request_serializer=cyberdog__app__pb2.BtRemoteCommand_Request.SerializeToString,
                response_deserializer=cyberdog__app__pb2.BtRemoteCommand_Respond.FromString,
                )
        self.setBodyPara = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/setBodyPara',
                request_serializer=cyberdog__app__pb2.Parameters.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.sendMotionTestRequest = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/sendMotionTestRequest',
                request_serializer=cyberdog__app__pb2.MotionCommand.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.getOffsetData = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/getOffsetData',
                request_serializer=cyberdog__app__pb2.OffsetRequest.SerializeToString,
                response_deserializer=cyberdog__app__pb2.OffsetCalibationData.FromString,
                )
        self.setOffsetData = channel.unary_stream(
                '/cyberdogapp.CyberdogApp/setOffsetData',
                request_serializer=cyberdog__app__pb2.OffsetCalibationData.SerializeToString,
                response_deserializer=cyberdog__app__pb2.OffsetRequest_result.FromString,
                )
        self.subscribeBms = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeBms',
                request_serializer=cyberdog__app__pb2.Bms.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeWifiRssi = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeWifiRssi',
                request_serializer=cyberdog__app__pb2.WifiRssi.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeStatus = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeStatus',
                request_serializer=cyberdog__app__pb2.StatusStamped.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeTrackingStatus = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeTrackingStatus',
                request_serializer=cyberdog__app__pb2.TrackingStatus.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeBodySelect = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeBodySelect',
                request_serializer=cyberdog__app__pb2.BodyInfo.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeTracking = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeTracking',
                request_serializer=cyberdog__app__pb2.BodyInfo.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeMap = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeMap',
                request_serializer=cyberdog__app__pb2.OccupancyGrid.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribePosition = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribePosition',
                request_serializer=cyberdog__app__pb2.DecisionStamped.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeVoiceprintResult = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeVoiceprintResult',
                request_serializer=cyberdog__app__pb2.VoiceprintResult.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeFaceResult = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeFaceResult',
                request_serializer=cyberdog__app__pb2.FaceResult.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.heartbeat = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/heartbeat',
                request_serializer=cyberdog__app__pb2.Ticks.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeNavStatus = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeNavStatus',
                request_serializer=cyberdog__app__pb2.Caution.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeOdomOut = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeOdomOut',
                request_serializer=cyberdog__app__pb2.Odometry.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeObstacleDetection = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeObstacleDetection',
                request_serializer=cyberdog__app__pb2.Around.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeDogPose = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeDogPose',
                request_serializer=cyberdog__app__pb2.DogPose.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeGpsScene = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeGpsScene',
                request_serializer=cyberdog__app__pb2.Scene.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribeRemoteEvent = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribeRemoteEvent',
                request_serializer=cyberdog__app__pb2.RemoteEvent.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )
        self.subscribePath = channel.unary_unary(
                '/cyberdogapp.CyberdogApp/subscribePath',
                request_serializer=cyberdog__app__pb2.Path.SerializeToString,
                response_deserializer=cyberdog__app__pb2.Result.FromString,
                )


class CyberdogAppServicer(object):
    """Missing associated documentation comment in .proto file."""

    def setMode(self, request, context):
        """app work as client 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setPattern(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setFollowRegion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def requestCamera(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def requestVoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def requestFaceManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendAppDecision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendAiToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setNavPosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setExtmonOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setBtRemoteCmd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setBodyPara(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendMotionTestRequest(self, request, context):
        """for motion test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getOffsetData(self, request, context):
        """for offset calibration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setOffsetData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeBms(self, request, context):
        """app work as server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeWifiRssi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeTrackingStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeBodySelect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeTracking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribePosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeVoiceprintResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeFaceResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeNavStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeOdomOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeObstacleDetection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeDogPose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeGpsScene(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeRemoteEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribePath(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CyberdogAppServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setMode': grpc.unary_stream_rpc_method_handler(
                    servicer.setMode,
                    request_deserializer=cyberdog__app__pb2.CheckoutMode_request.FromString,
                    response_serializer=cyberdog__app__pb2.CheckoutMode_respond.SerializeToString,
            ),
            'setPattern': grpc.unary_stream_rpc_method_handler(
                    servicer.setPattern,
                    request_deserializer=cyberdog__app__pb2.CheckoutPattern_request.FromString,
                    response_serializer=cyberdog__app__pb2.CheckoutPattern_respond.SerializeToString,
            ),
            'setFollowRegion': grpc.unary_stream_rpc_method_handler(
                    servicer.setFollowRegion,
                    request_deserializer=cyberdog__app__pb2.BodyRegion_Request.FromString,
                    response_serializer=cyberdog__app__pb2.BodyRegion_Respond.SerializeToString,
            ),
            'requestCamera': grpc.unary_stream_rpc_method_handler(
                    servicer.requestCamera,
                    request_deserializer=cyberdog__app__pb2.CameraService_request.FromString,
                    response_serializer=cyberdog__app__pb2.CameraService_respond.SerializeToString,
            ),
            'requestVoice': grpc.unary_stream_rpc_method_handler(
                    servicer.requestVoice,
                    request_deserializer=cyberdog__app__pb2.Voiceprint_Request.FromString,
                    response_serializer=cyberdog__app__pb2.Voiceprint_Response.SerializeToString,
            ),
            'requestFaceManager': grpc.unary_stream_rpc_method_handler(
                    servicer.requestFaceManager,
                    request_deserializer=cyberdog__app__pb2.FaceManager_Request.FromString,
                    response_serializer=cyberdog__app__pb2.FaceManager_Response.SerializeToString,
            ),
            'sendAppDecision': grpc.unary_unary_rpc_method_handler(
                    servicer.sendAppDecision,
                    request_deserializer=cyberdog__app__pb2.Decissage.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'sendAiToken': grpc.unary_stream_rpc_method_handler(
                    servicer.sendAiToken,
                    request_deserializer=cyberdog__app__pb2.TokenPass_Request.FromString,
                    response_serializer=cyberdog__app__pb2.TokenPass_Response.SerializeToString,
            ),
            'setNavPosition': grpc.unary_stream_rpc_method_handler(
                    servicer.setNavPosition,
                    request_deserializer=cyberdog__app__pb2.Target_Request.FromString,
                    response_serializer=cyberdog__app__pb2.Target_Response.SerializeToString,
            ),
            'setExtmonOrder': grpc.unary_stream_rpc_method_handler(
                    servicer.setExtmonOrder,
                    request_deserializer=cyberdog__app__pb2.ExtMonOrder_Request.FromString,
                    response_serializer=cyberdog__app__pb2.ExtMonOrder_Respond.SerializeToString,
            ),
            'disconnect': grpc.unary_stream_rpc_method_handler(
                    servicer.disconnect,
                    request_deserializer=cyberdog__app__pb2.Disconnect.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'setBtRemoteCmd': grpc.unary_stream_rpc_method_handler(
                    servicer.setBtRemoteCmd,
                    request_deserializer=cyberdog__app__pb2.BtRemoteCommand_Request.FromString,
                    response_serializer=cyberdog__app__pb2.BtRemoteCommand_Respond.SerializeToString,
            ),
            'setBodyPara': grpc.unary_unary_rpc_method_handler(
                    servicer.setBodyPara,
                    request_deserializer=cyberdog__app__pb2.Parameters.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'sendMotionTestRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.sendMotionTestRequest,
                    request_deserializer=cyberdog__app__pb2.MotionCommand.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'getOffsetData': grpc.unary_stream_rpc_method_handler(
                    servicer.getOffsetData,
                    request_deserializer=cyberdog__app__pb2.OffsetRequest.FromString,
                    response_serializer=cyberdog__app__pb2.OffsetCalibationData.SerializeToString,
            ),
            'setOffsetData': grpc.unary_stream_rpc_method_handler(
                    servicer.setOffsetData,
                    request_deserializer=cyberdog__app__pb2.OffsetCalibationData.FromString,
                    response_serializer=cyberdog__app__pb2.OffsetRequest_result.SerializeToString,
            ),
            'subscribeBms': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeBms,
                    request_deserializer=cyberdog__app__pb2.Bms.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeWifiRssi': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeWifiRssi,
                    request_deserializer=cyberdog__app__pb2.WifiRssi.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeStatus,
                    request_deserializer=cyberdog__app__pb2.StatusStamped.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeTrackingStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeTrackingStatus,
                    request_deserializer=cyberdog__app__pb2.TrackingStatus.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeBodySelect': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeBodySelect,
                    request_deserializer=cyberdog__app__pb2.BodyInfo.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeTracking': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeTracking,
                    request_deserializer=cyberdog__app__pb2.BodyInfo.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeMap': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeMap,
                    request_deserializer=cyberdog__app__pb2.OccupancyGrid.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribePosition': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribePosition,
                    request_deserializer=cyberdog__app__pb2.DecisionStamped.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeVoiceprintResult': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeVoiceprintResult,
                    request_deserializer=cyberdog__app__pb2.VoiceprintResult.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeFaceResult': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeFaceResult,
                    request_deserializer=cyberdog__app__pb2.FaceResult.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.heartbeat,
                    request_deserializer=cyberdog__app__pb2.Ticks.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeNavStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeNavStatus,
                    request_deserializer=cyberdog__app__pb2.Caution.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeOdomOut': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeOdomOut,
                    request_deserializer=cyberdog__app__pb2.Odometry.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeObstacleDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeObstacleDetection,
                    request_deserializer=cyberdog__app__pb2.Around.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeDogPose': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeDogPose,
                    request_deserializer=cyberdog__app__pb2.DogPose.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeGpsScene': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeGpsScene,
                    request_deserializer=cyberdog__app__pb2.Scene.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribeRemoteEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeRemoteEvent,
                    request_deserializer=cyberdog__app__pb2.RemoteEvent.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
            'subscribePath': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribePath,
                    request_deserializer=cyberdog__app__pb2.Path.FromString,
                    response_serializer=cyberdog__app__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cyberdogapp.CyberdogApp', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CyberdogApp(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def setMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/setMode',
            cyberdog__app__pb2.CheckoutMode_request.SerializeToString,
            cyberdog__app__pb2.CheckoutMode_respond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setPattern(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/setPattern',
            cyberdog__app__pb2.CheckoutPattern_request.SerializeToString,
            cyberdog__app__pb2.CheckoutPattern_respond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setFollowRegion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/setFollowRegion',
            cyberdog__app__pb2.BodyRegion_Request.SerializeToString,
            cyberdog__app__pb2.BodyRegion_Respond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def requestCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/requestCamera',
            cyberdog__app__pb2.CameraService_request.SerializeToString,
            cyberdog__app__pb2.CameraService_respond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def requestVoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/requestVoice',
            cyberdog__app__pb2.Voiceprint_Request.SerializeToString,
            cyberdog__app__pb2.Voiceprint_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def requestFaceManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/requestFaceManager',
            cyberdog__app__pb2.FaceManager_Request.SerializeToString,
            cyberdog__app__pb2.FaceManager_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendAppDecision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/sendAppDecision',
            cyberdog__app__pb2.Decissage.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendAiToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/sendAiToken',
            cyberdog__app__pb2.TokenPass_Request.SerializeToString,
            cyberdog__app__pb2.TokenPass_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setNavPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/setNavPosition',
            cyberdog__app__pb2.Target_Request.SerializeToString,
            cyberdog__app__pb2.Target_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setExtmonOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/setExtmonOrder',
            cyberdog__app__pb2.ExtMonOrder_Request.SerializeToString,
            cyberdog__app__pb2.ExtMonOrder_Respond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/disconnect',
            cyberdog__app__pb2.Disconnect.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setBtRemoteCmd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/setBtRemoteCmd',
            cyberdog__app__pb2.BtRemoteCommand_Request.SerializeToString,
            cyberdog__app__pb2.BtRemoteCommand_Respond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setBodyPara(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/setBodyPara',
            cyberdog__app__pb2.Parameters.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendMotionTestRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/sendMotionTestRequest',
            cyberdog__app__pb2.MotionCommand.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getOffsetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/getOffsetData',
            cyberdog__app__pb2.OffsetRequest.SerializeToString,
            cyberdog__app__pb2.OffsetCalibationData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setOffsetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cyberdogapp.CyberdogApp/setOffsetData',
            cyberdog__app__pb2.OffsetCalibationData.SerializeToString,
            cyberdog__app__pb2.OffsetRequest_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeBms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeBms',
            cyberdog__app__pb2.Bms.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeWifiRssi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeWifiRssi',
            cyberdog__app__pb2.WifiRssi.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeStatus',
            cyberdog__app__pb2.StatusStamped.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeTrackingStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeTrackingStatus',
            cyberdog__app__pb2.TrackingStatus.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeBodySelect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeBodySelect',
            cyberdog__app__pb2.BodyInfo.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeTracking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeTracking',
            cyberdog__app__pb2.BodyInfo.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeMap',
            cyberdog__app__pb2.OccupancyGrid.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribePosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribePosition',
            cyberdog__app__pb2.DecisionStamped.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeVoiceprintResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeVoiceprintResult',
            cyberdog__app__pb2.VoiceprintResult.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeFaceResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeFaceResult',
            cyberdog__app__pb2.FaceResult.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/heartbeat',
            cyberdog__app__pb2.Ticks.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeNavStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeNavStatus',
            cyberdog__app__pb2.Caution.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeOdomOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeOdomOut',
            cyberdog__app__pb2.Odometry.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeObstacleDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeObstacleDetection',
            cyberdog__app__pb2.Around.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeDogPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeDogPose',
            cyberdog__app__pb2.DogPose.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeGpsScene(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeGpsScene',
            cyberdog__app__pb2.Scene.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeRemoteEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribeRemoteEvent',
            cyberdog__app__pb2.RemoteEvent.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribePath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cyberdogapp.CyberdogApp/subscribePath',
            cyberdog__app__pb2.Path.SerializeToString,
            cyberdog__app__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
